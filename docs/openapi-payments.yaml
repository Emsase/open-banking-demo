openapi: 3.0.3
info:
  title: Open Banking Demo â€“ Payment Service API
  version: "1.0.0"
  description: >
    Internal service API for payment creation and retrieval.
    Protected with JWT scopes in demo (HS256). In production, use OAuth2 JWKS.

servers:
  - url: http://localhost:8081
    description: Local Dev

tags:
  - name: Payments

paths:
  /payments:
    post:
      tags: [Payments]
      summary: Create payment (idempotent)
      security:
        - oauth2:
            - payments:create
      parameters:
        - in: header
          name: Idempotency-Key
          required: false
          schema: { type: string, format: uuid }
          description: Key for idempotent create.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreatePaymentRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreatePaymentResponse' }
        '409':
          description: Same Idempotency-Key with different payload detected (optional policy)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /payments/{id}:
    get:
      tags: [Payments]
      summary: Get payment
      security:
        - oauth2:
            - payments:read
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaymentView' }
        '404': { description: Not found }

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://idp.example.com/oauth/token
          scopes:
            payments:create: Create payments
            payments:read: Read payments
  schemas:
    CreatePaymentRequest:
      type: object
      required: [debtorIban, creditorIban, amount, currency]
      properties:
        debtorIban: { type: string }
        creditorIban: { type: string }
        amount: { type: string, pattern: '^\d+(\.\d{1,2})?$', example: "12.34" }
        currency: { type: string, minLength: 3, maxLength: 3, example: EUR }
    CreatePaymentResponse:
      type: object
      required: [paymentId, status]
      properties:
        paymentId: { type: string, format: uuid }
        status:
          type: string
          enum: [CREATED, RISK_APPROVED, REJECTED, EXECUTED, FAILED]
    PaymentView:
      type: object
      required: [id, status, amount, currency]
      properties:
        id: { type: string, format: uuid }
        status:
          type: string
          enum: [CREATED, RISK_APPROVED, REJECTED, EXECUTED, FAILED]
        amount: { type: string }
        currency: { type: string }
    Error:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
